/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  EventType: "COMPANY_COURSE" | "COMPANY_PRESENTATION" | "COURSE" | "SOCIAL"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AttendanceInfo: { // root type
    allowedGroups?: string[] | null; // [String!]
    canCauseMarks: boolean; // Boolean!
    delayMarkedUsers: boolean; // Boolean!
    registrationEndDate: NexusGenScalars['DateTime']; // DateTime!
    registrationStartDate: NexusGenScalars['DateTime']; // DateTime!
    unattendDeadline: NexusGenScalars['DateTime']; // DateTime!
  }
  Company: { // root type
    id: string; // ID!
    link: string; // String!
    name: string; // String!
  }
  Event: { // root type
    attendance?: NexusGenRootTypes['AttendanceInfo'] | null; // AttendanceInfo
    company?: NexusGenRootTypes['Company'] | null; // Company
    description: string; // String!
    endDate: NexusGenScalars['DateTime']; // DateTime!
    eventType: NexusGenEnums['EventType']; // EventType!
    image: string; // String!
    location: string; // String!
    organizer: NexusGenRootTypes['Organizer']; // Organizer!
    startDate: NexusGenScalars['DateTime']; // DateTime!
    tags: string[]; // [String!]!
    title: string; // String!
  }
  Organizer: { // root type
    contactMail: string; // String!
    description: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  Participant: { // root type
    id: string; // ID!
    name: string; // String!
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AttendanceInfo: { // field return type
    allowedGroups: string[] | null; // [String!]
    canCauseMarks: boolean; // Boolean!
    delayMarkedUsers: boolean; // Boolean!
    registrationEndDate: NexusGenScalars['DateTime']; // DateTime!
    registrationStartDate: NexusGenScalars['DateTime']; // DateTime!
    unattendDeadline: NexusGenScalars['DateTime']; // DateTime!
  }
  Company: { // field return type
    id: string; // ID!
    link: string; // String!
    name: string; // String!
  }
  Event: { // field return type
    attendance: NexusGenRootTypes['AttendanceInfo'] | null; // AttendanceInfo
    company: NexusGenRootTypes['Company'] | null; // Company
    description: string; // String!
    endDate: NexusGenScalars['DateTime']; // DateTime!
    eventType: NexusGenEnums['EventType']; // EventType!
    image: string; // String!
    location: string; // String!
    organizer: NexusGenRootTypes['Organizer']; // Organizer!
    startDate: NexusGenScalars['DateTime']; // DateTime!
    tags: string[]; // [String!]!
    title: string; // String!
  }
  Organizer: { // field return type
    contactMail: string; // String!
    description: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  Participant: { // field return type
    id: string; // ID!
    name: string; // String!
  }
  Query: { // field return type
    events: NexusGenRootTypes['Event'][]; // [Event!]!
  }
}

export interface NexusGenFieldTypeNames {
  AttendanceInfo: { // field return type name
    allowedGroups: 'String'
    canCauseMarks: 'Boolean'
    delayMarkedUsers: 'Boolean'
    registrationEndDate: 'DateTime'
    registrationStartDate: 'DateTime'
    unattendDeadline: 'DateTime'
  }
  Company: { // field return type name
    id: 'ID'
    link: 'String'
    name: 'String'
  }
  Event: { // field return type name
    attendance: 'AttendanceInfo'
    company: 'Company'
    description: 'String'
    endDate: 'DateTime'
    eventType: 'EventType'
    image: 'String'
    location: 'String'
    organizer: 'Organizer'
    startDate: 'DateTime'
    tags: 'String'
    title: 'String'
  }
  Organizer: { // field return type name
    contactMail: 'String'
    description: 'String'
    id: 'ID'
    name: 'String'
  }
  Participant: { // field return type name
    id: 'ID'
    name: 'String'
  }
  Query: { // field return type name
    events: 'Event'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    __typename: true
    isTypeOf: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}